#!/usr/bin/env python
"""
Lifetime battery charge and capacity logger
"""

# Copyright (C) 2013 Daniele Varrazzo <daniele.varrazzo@gmail.com>


import os
import sys
import time
import signal
import datetime
from itertools import takewhile

SYSDIR = '/sys/class/power_supply/'
ACPIDIR = '/proc/acpi/battery/'         # not available after Ubuntu 12.10
DATEFMT = "%Y-%m-%d %H:%M:%S"


import logging
logger = logging.getLogger()
logging.basicConfig(
    stream=sys.stderr,
    level=logging.INFO,
    format='%(asctime)s %(levelname)s %(message)s',
    datefmt=DATEFMT)


def create_batteries(opt):
    bats = create_batteries_sys(opt)
    if bats:
        return bats
    else:
        return create_batteries_acpi(opt)

def create_batteries_sys(opt):
    logger.debug("looking for batteres in '%s'", SYSDIR)
    if not os.path.isdir(SYSDIR):
        return []

    names = os.listdir(SYSDIR)
    bats = []
    for name in names:
        if os.path.exists(os.path.join(SYSDIR, name, 'uevent')):
            logger.info("found battery %s", name)
            bat = SysBattery(name, logdir=opt.logdir)
            bats.append(bat)

    return bats

def create_batteries_acpi(opt):
    logger.debug("looking for batteres in '%s'", ACPIDIR)
    if not os.path.isdir(ACPIDIR):
        return []

    names = os.listdir(ACPIDIR)
    bats = []
    for name in names:
        if os.path.exists(os.path.join(ACPIDIR, name, 'info')) \
        and os.path.exists(os.path.join(ACPIDIR, name, 'state')):
            logger.info("found battery %s", name)
            bat = AcpiBattery(name, logdir=opt.logdir)
            bats.append(bat)

    return bats


class Battery(object):
    def __init__(self, name, logdir):
        self.name = name
        self.logdir = logdir

    def print_titles(self):
        raise NotImplementedError

    def print_log(self):
        raise NotImplementedError


class SysBattery(Battery):
    def __init__(self, name, logdir):
        super(SysBattery, self).__init__(name, logdir)

        self.outfile = LogFile(separator='=',
            infile = os.path.join(SYSDIR, name, 'uevent'),
            outfile = os.path.join(logdir, "%s.uevent.log" % name))

    def print_titles(self):
        self.outfile.print_titles()

    def print_log(self):
        self.outfile.print_log()


class AcpiBattery(Battery):
    def __init__(self, name, logdir):
        super(AcpiBattery, self).__init__(name, logdir)

        self.finfo = LogFile(separator=':',
            infile = os.path.join(ACPIDIR, name, 'info'),
            outfile = os.path.join(logdir, "%s.info.log" % name))
        self.fstate = LogFile(separator=':',
            infile = os.path.join(ACPIDIR, name, 'state'),
            outfile = os.path.join(logdir, "%s.state.log" % name))

    def print_titles(self):
        self.finfo.print_titles()
        self.fstate.print_titles()

    def print_log(self):
        self.finfo.print_log()
        self.fstate.print_log()


class LogFile(object):
    def __init__(self, infile, outfile, separator):
        self.infn = infile
        self.outfn = outfile
        self.separator = separator

    def print_titles(self):
        data = [k for k, v in self.get_data()]
        prefix = self.find_common_prefix(data)

        outfile = self.get_outfile()
        outfile.write(':timestamp\t')
        outfile.write('\t'.join(label[len(prefix):] for label in data))
        outfile.write('\n')
        outfile.flush()

    _oldlog = None

    def print_log(self):
        data = '\t'.join(v for k, v in self.get_data())
        if data == self._oldlog:
            return

        outfile = self.get_outfile()
        outfile.write(datetime.datetime.now().strftime(DATEFMT))
        outfile.write('\t')
        outfile.write(data)
        outfile.write('\n')
        outfile.flush()
        self._oldlog = data

    def get_data(self):
        logger.debug("reading file %s", self.infn)
        with open(self.infn, 'r') as f:
            for line in f:
                if self.separator not in line: continue
                k, v = line.split(self.separator, 1)
                yield k.strip(), v.strip()

    _outfile = None

    def get_outfile(self):
        if self._outfile is None:
            logger.debug("opening output file %s", self.outfn)
            if not os.path.exists(os.path.dirname(self.outfn)):
                os.makedirs(os.path.dirname(self.outfn))

            self._outfile = open(self.outfn, 'a')

        return self._outfile

    def find_common_prefix(self, strings):
        prefix = None
        for s in strings:
            if prefix is None:
                prefix = s
            else:
                prefix = ''.join(p[0] for p in takewhile(
                    lambda p: p[0] == p[1],
                    zip(prefix, s)))

        return prefix


def handler(signum, frame):
    logger.info("got signal %s", signum)
    sys.exit(128 + signum)

signal.signal(signal.SIGTERM, handler)  # to catch upstart exit


class ScriptError(Exception):
    """Controlled exception raised by the script."""

started = False

def main():
    global started

    opt = parse_cmdline()
    if opt.verbose:
        logger.setLevel(logging.DEBUG)

    logger.info("batlog started")
    started = True

    bats = create_batteries(opt)
    if not bats:
        raise ScriptError("no battery found")

    for bat in bats:
        bat.print_titles()

    while 1:
        for bat in bats:
            bat.print_log()

        time.sleep(opt.interval)

def parse_cmdline():
    from optparse import OptionParser

    parser = OptionParser(usage="%prog [options]",
        description=__doc__)
    parser.add_option('--logdir', metavar="DIR", default='.',
        help="where to create log files [default: %default]")
    parser.add_option('--interval', metavar="SEC", default=60, type=int,
        help="how often to sample the battery level [default: %default sec]")
    parser.add_option('--verbose', action="store_true",
        help="print more details on stderr")

    opt, args = parser.parse_args()
    if args:
        parser.error("no arg expected")

    return opt


if __name__ == '__main__':
    try:
        sys.exit(main())

    except ScriptError, e:
        logger.error("%s", e)
        sys.exit(1)

    except Exception:
        logger.exception("unexpected error")
        sys.exit(1)

    except KeyboardInterrupt:
        logger.info("user interrupt")
        sys.exit(0)

    except SystemExit, e:
        if started:
            logger.info("system exit")

        # else, exit silently (e.g. because of 'batlog --help')
        sys.stderr.flush()
        sys.exit(e.code)
